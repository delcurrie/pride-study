@mixin image-replacement {
    background-color: transparent;
    border: 0;
    overflow: hidden;
    /* IE 6/7 fallback */
    *text-indent: -9999px;
    &:before {
        content: "";
        display: block;
        width: 0;
        height: 150%;
    }
}

@mixin input-placeholder {
    &::-webkit-input-placeholder { @content; }
    &:-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &.placeholder { @content; }
}

// Shortcut to set the color of html5 input placeholder text.
@mixin input-placeholder-color($color) {
    @include input-placeholder {
        color: $color;
    }
}

// https://github.com/bitmanic/rem
// Eg.
// @include rem('font-size', 10px);
// @include rem('padding',10px 0 2px 5px);
$baseline-px: 16px;
@mixin rem($property, $px-values) {
    $baseline-rem: $baseline-px / 1rem * 1;
    #{$property}: $px-values;
    @if type-of($px-values) == "number" {
        #{$property}: $px-values / $baseline-rem; }
    @else {
        $rem-values: ();
        @each $value in $px-values {
            @if $value == 0 or type-of( $value ) != "number" {
                $rem-values: append($rem-values, $value);
            } @else {
                $rem-values: append($rem-values, $value / $baseline-rem);
            }
        }
        // Return the property and its list of converted values
        #{$property}: $rem-values;
    }
}

@mixin disable-selection {
    -webkit-touch-callout : none;
    -webkit-user-select   : none;
    -khtml-user-select    : none;
    -moz-user-select      : none;
    -ms-user-select       : none;
    user-select           : none;
}

@function letter-spacing($value, $font-size) {
    @return strip-units((($value * $font-size) / 1000)) * 1px;
}

@function strip-units($number) {
    @return $number / ($number * 0 + 1);
}

@function percentage-from-width($block-width, $page-width) {
    @return strip-units($block-width/$page-width)*100%;
}

@function auto-line-height($font-size) {
    @return $font-size * 1.2;
}

@function retinize($number, $ceil: false) {
    @if ($ceil == true) {
        @return ceil($number / 2);
    } @else {
        @return $number / 2;
    }
}

@mixin centre($axis: "both"){
    position:absolute;

    @if $axis == "y"{
        top:50%;
        @include transform(translateY(-50%));
    }
    @if $axis == "x"{
        left:50%;
        @include transform(translateX(-50%));
    }
    @if $axis == "both"{
        top: 50%;
        left: 50%;
        @include transform(translate(-50%, -50%));
    }
}

@mixin retina-sprite($name, $hover: false, $active: false, $dimensions: true) {
  @include _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions);
}

// The general purpose retina sprite mixin.
  //
  //    @include retina-sprite(name, $spritemap1, $spritemap2)
  //    @include retina-sprite(name, $spritemap1, $spritemap2[, $dimensions: true, $pad: 0])
  //
  //    If `dimensions` is true, then width/height will also be set.
  //
  //    if `pad` is non-zero, then that's how much padding the element will have (requires
  //    $spacing on the sprite maps). Great for iPhone interfaces to make hit areas bigger.
  //
@mixin _retina-sprite($name, $sprites, $sprites2x, $hover, $active, $dimensions: true, $pad: 0) {
  @if $dimensions == true {
    @include sprite-dimensions($sprites, $name);
  }
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name, -$pad, -$pad);
  background-repeat: no-repeat;

  @if $hover == true {
    $name_hover: $name + _hover;
    &:hover {
      background-position: sprite-position($sprites, $name_hover, -$pad, -$pad);
    }
  }
  @if $active == true {
    $name_active: $name + _active;
    &:active {
      background-position: sprite-position($sprites, $name_active, -$pad, -$pad);
    }
  }

  @if $pad > 0 {
    padding: $pad;
  }

  @include hdpi {
    & {
      $pos: sprite-position($sprites2x, $name, -$pad * 2, -$pad * 2);
      background-image: sprite-url($sprites2x);
      background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
      @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
      //  sprite-path() returns the path of the generated sprite sheet, which
      //  image-width() calculates the width of. the ceil() is in place in case
      //  you have sprites that have an odd-number of pixels in width

      @if $hover == true {
        $name_hover: $name + _hover;    // create myButton_hover and assign it
        &:hover{
          $pos: sprite-position($sprites2x, $name_hover, -$pad * 2, -$pad * 2);
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
        }
      }
      @if $active == true {
        $name_active: $name + _active;    // create myButton_active and assign it
        &:active{
          $pos: sprite-position($sprites2x, $name_active, -$pad * 2, -$pad * 2);
          background-position: nth($pos, 1) / 2 nth($pos, 2) / 2;
        }
      }
    }
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;

  -webkit-transform-style: preserve-3d;
  transform-style: preserve-3d;
}


@mixin box-shadow($args...) {
  -webkit-box-shadow: $args;
  -moz-box-shadow: $args;
  box-shadow: $args;
}

@function percent-width($width, $containerwidth) {
  @return ($width / $containerwidth) * 100%;
}

@mixin sprite-width($sprite) {
  width: nth($sprite, 3);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 4);
}

@function sprite-width($sprite) {
  @return nth($sprite, 3);
}

@function sprite-height($sprite) {
  @return nth($sprite, 4);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 1);
  $sprite-offset-y: nth($sprite, 2);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite($sprite) {
  @include sprite-position($sprite);
  background-repeat: no-repeat;
  overflow: hidden;
  display: block;
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

@mixin fa-icon($icon, $position: before, $padding: 0) {
    &:#{$position} {
        display: inline-block;
        @if $padding not 0 {
            @if $position == "before" {
                padding-right: $padding;
            } @elseif $position == "after" {
                padding-left: $padding;
            }
        }
        font-family: FontAwesome;
        font-style: normal;
        font-weight: normal;
        line-height: 1;
        text-decoration: inherit;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        content: $icon;
    }
}

